<?php

namespace DoctrineProxies\__CG__\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class User extends \Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function addDinner(\Entity\Dinner $dinners)
    {
        $this->__load();
        return parent::addDinner($dinners);
    }

    public function removeDinner(\Entity\Dinner $dinners)
    {
        $this->__load();
        return parent::removeDinner($dinners);
    }

    public function getDinners()
    {
        $this->__load();
        return parent::getDinners();
    }

    public function addRsvp(\Entity\Rsvp $rsvps)
    {
        $this->__load();
        return parent::addRsvp($rsvps);
    }

    public function removeRsvp(\Entity\Rsvp $rsvps)
    {
        $this->__load();
        return parent::removeRsvp($rsvps);
    }

    public function getRsvps()
    {
        $this->__load();
        return parent::getRsvps();
    }

    public function addRole(\Mparaiso\User\Entity\Role $roles)
    {
        $this->__load();
        return parent::addRole($roles);
    }

    public function removeRole(\Mparaiso\User\Entity\Role $roles)
    {
        $this->__load();
        return parent::removeRole($roles);
    }

    public function getRoles()
    {
        $this->__load();
        return parent::getRoles();
    }

    public function setUsername($username)
    {
        $this->__load();
        return parent::setUsername($username);
    }

    public function getUsername()
    {
        $this->__load();
        return parent::getUsername();
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function setSalt($salt)
    {
        $this->__load();
        return parent::setSalt($salt);
    }

    public function getSalt()
    {
        $this->__load();
        return parent::getSalt();
    }

    public function setAccountNonExpired($accountNonExpired)
    {
        $this->__load();
        return parent::setAccountNonExpired($accountNonExpired);
    }

    public function getAccountNonExpired()
    {
        $this->__load();
        return parent::getAccountNonExpired();
    }

    public function setAccountNonLocked($accountNonLocked)
    {
        $this->__load();
        return parent::setAccountNonLocked($accountNonLocked);
    }

    public function getAccountNonLocked()
    {
        $this->__load();
        return parent::getAccountNonLocked();
    }

    public function setCredentialsNonExpired($credentialsNonExpired)
    {
        $this->__load();
        return parent::setCredentialsNonExpired($credentialsNonExpired);
    }

    public function getCredentialsNonExpired()
    {
        $this->__load();
        return parent::getCredentialsNonExpired();
    }

    public function setEnabled($enabled)
    {
        $this->__load();
        return parent::setEnabled($enabled);
    }

    public function getEnabled()
    {
        $this->__load();
        return parent::getEnabled();
    }

    public function serialize()
    {
        $this->__load();
        return parent::serialize();
    }

    public function unserialize($serialized)
    {
        $this->__load();
        return parent::unserialize($serialized);
    }

    public function eraseCredentials()
    {
        $this->__load();
        return parent::eraseCredentials();
    }

    public function isAccountNonExpired()
    {
        $this->__load();
        return parent::isAccountNonExpired();
    }

    public function isAccountNonLocked()
    {
        $this->__load();
        return parent::isAccountNonLocked();
    }

    public function isCredentialsNonExpired()
    {
        $this->__load();
        return parent::isCredentialsNonExpired();
    }

    public function isEnabled()
    {
        $this->__load();
        return parent::isEnabled();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'username', 'password', 'email', 'salt', 'accountNonExpired', 'accountNonLocked', 'credentialsNonExpired', 'enabled', 'id', 'dinners', 'rsvps', 'roles');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}